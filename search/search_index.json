{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Apple Auth Version: 0.0.1 Python library to implement Sign In with Apple in your Django backend. \ud83c\udf4e Apple docs From now on, some stuff is much better explained on the Apple docs, so when in doubt just check (if you haven't done so) the following documents: Sign In With Apple Request an authorization to the Sign in with Apple server Generate and validate tokens Revoke tokens \ud83d\udcdd Configuration To start using the lib, some Apple Keys needs to be generated: ... \ud83d\ude80 Usage You can install the library directly from PYPI using pip: pip install appleauth Edit your settings.py file and update INSTALLED_APPS and APPLE_CONFIG : INSTALLED_APPS = [ ... , \"appleauth\" ] # Apple Config APPLE_CONFIG = { \"APPLE_KEY_ID\" : \"\" , \"APPLE_TEAM_ID\" : \"\" , \"APPLE_CLIENT_ID\" : \"\" , \"APPLE_PRIVATE_KEY\" : \"\" , \"APPLE_REDIRECT_URL\" : \"\" , \"APPLE_SCOPE\" : [ \"name\" , \"email\" ], \"TOKEN_CALLBACK_URL\" : \"\" , \"RESPONSE_HANDLER_CLASS\" : \"\" , } Create Response Handler Class and update path in APPLE_CONFIG : from appleauth.services import AppleAuthResponseHandler class AppleSignInResponseHandler ( AppleAuthResponseHandler ): def handle_fetch_or_create_user ( self , request , user_dict ): email = user_dict . get ( \"email\" , None ) apple_id = user_dict . get ( \"apple_id\" , None ) # Implement a method to handle user creation user = get_or_create_user ( email , apple_id ) return user def generate_response_json ( self , user , extra_context ): # Implement a serializer to serialize user data response = AuthUserSerializer ( user , context = extra_context ) return response . data Update Routes: from rest_framework.routers import DefaultRouter from appleauth.apis import AppleAuthViewset default_router = DefaultRouter ( trailing_slash = False ) default_router . register ( \"auth/apple\" , AppleAuthViewset , basename = \"apple-auth\" ) NOTE: AuthUserSerializer used in above ref. could be created as per app's functionality and contain fields which needs to be sent in response of authorization. get_or_create_user method used in above code ref. could be created as per app's functionality. \ud83e\udd16 Endpoints Provides following APIs: Authorization URL API It generates Apple's authorization-url used to redirect to Apple's Authorization Server to request consent from resource owner. Authorize API Exchange authorization code for access token. Talk to resource server with access token and fetch user's profile information. Authorize IOS Token API Verifies an ID Token issued by Apple's authorization server. Fetch user details from decoded token. NOTE: This documentation changes frequently, checkout the changelog for detailed breaking changes and features added. Write your documentation using Markdown in docs/ folder. Need help? Read mkdocs documentation .","title":"Home"},{"location":"#apple-auth","text":"Version: 0.0.1 Python library to implement Sign In with Apple in your Django backend.","title":"Apple Auth"},{"location":"#apple-docs","text":"From now on, some stuff is much better explained on the Apple docs, so when in doubt just check (if you haven't done so) the following documents: Sign In With Apple Request an authorization to the Sign in with Apple server Generate and validate tokens Revoke tokens","title":"\ud83c\udf4e Apple docs"},{"location":"#configuration","text":"To start using the lib, some Apple Keys needs to be generated: ...","title":"\ud83d\udcdd Configuration"},{"location":"#usage","text":"You can install the library directly from PYPI using pip: pip install appleauth Edit your settings.py file and update INSTALLED_APPS and APPLE_CONFIG : INSTALLED_APPS = [ ... , \"appleauth\" ] # Apple Config APPLE_CONFIG = { \"APPLE_KEY_ID\" : \"\" , \"APPLE_TEAM_ID\" : \"\" , \"APPLE_CLIENT_ID\" : \"\" , \"APPLE_PRIVATE_KEY\" : \"\" , \"APPLE_REDIRECT_URL\" : \"\" , \"APPLE_SCOPE\" : [ \"name\" , \"email\" ], \"TOKEN_CALLBACK_URL\" : \"\" , \"RESPONSE_HANDLER_CLASS\" : \"\" , } Create Response Handler Class and update path in APPLE_CONFIG : from appleauth.services import AppleAuthResponseHandler class AppleSignInResponseHandler ( AppleAuthResponseHandler ): def handle_fetch_or_create_user ( self , request , user_dict ): email = user_dict . get ( \"email\" , None ) apple_id = user_dict . get ( \"apple_id\" , None ) # Implement a method to handle user creation user = get_or_create_user ( email , apple_id ) return user def generate_response_json ( self , user , extra_context ): # Implement a serializer to serialize user data response = AuthUserSerializer ( user , context = extra_context ) return response . data Update Routes: from rest_framework.routers import DefaultRouter from appleauth.apis import AppleAuthViewset default_router = DefaultRouter ( trailing_slash = False ) default_router . register ( \"auth/apple\" , AppleAuthViewset , basename = \"apple-auth\" ) NOTE: AuthUserSerializer used in above ref. could be created as per app's functionality and contain fields which needs to be sent in response of authorization. get_or_create_user method used in above code ref. could be created as per app's functionality.","title":"\ud83d\ude80 Usage"},{"location":"#endpoints","text":"Provides following APIs: Authorization URL API It generates Apple's authorization-url used to redirect to Apple's Authorization Server to request consent from resource owner. Authorize API Exchange authorization code for access token. Talk to resource server with access token and fetch user's profile information. Authorize IOS Token API Verifies an ID Token issued by Apple's authorization server. Fetch user details from decoded token. NOTE: This documentation changes frequently, checkout the changelog for detailed breaking changes and features added. Write your documentation using Markdown in docs/ folder. Need help? Read mkdocs documentation .","title":"\ud83e\udd16 Endpoints"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.0.1] - 2023-01-09 Added Initial Release","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#001-2023-01-09","text":"","title":"[0.0.1] - 2023-01-09"},{"location":"changelog/#added","text":"Initial Release","title":"Added"},{"location":"endpoints/","text":"Apple Auth Endpoints Get Authorization URL Authorization URL is used to redirect to Apple's Authorization Server to request consent from resource owner. Query Parameters: state (JSON object) redirect_url Response will contain the same object along with state identifier GET {BASE_URL}/auth/apple/auth-url Example: Request GET {BASE_URL}/auth/apple/auth-url?state={\"redirect_to\":\"login\"}&redirect_url=\"https://example.com/apple/auth/callback\" Response status: 200 OK { \"authorization_url\" : \"https://appleid.apple.com/auth/authorize?client_id=signin.com.dev.example.Example&redirect_uri=https://example.com/auth/apple/token&state={%22identifier%22:%20%22L21RBCKL4XP%22,%20%22fe_redirect_url%22:%20%22https://example.com/apple/auth/callback%22,%20%22redirect_to%22:%20%22login%22}&response_type=code&response_mode=form_post&scope=name%20email\" } Authorize User Exchange authorization code for access token and talk to resource server with access token and fetch user's profile information. Note: After successful authorization, the callback will have the authorization code and state. We can fetch code from redirect URI query parameters and pass it to Authorize API. POST {BASE_URL}/auth/apple/authorize Example: Request { \"code\" : \"ce10a4c14aae348b0b3bab1d0a9388f0bA1541ufpZ0R1C1x98Ev1w\" } Response status: 200 OK Response needs to be defined by overriding the AppleAuthResponseHandler class Authorize iOS Token Verifies an ID Token issued by Apple's authorization server and fetch user details from decoded token. POST {BASE_URL}/auth/apple/authorize/ios Example: Request { \"id_token\" : \"<id_token generated by apple>\" } Response \"Response needs to be defined by overriding the AppleAuthResponseHandler class\"\"","title":"REST Endpoints"},{"location":"endpoints/#apple-auth-endpoints","text":"","title":"Apple Auth Endpoints"},{"location":"endpoints/#get-authorization-url","text":"Authorization URL is used to redirect to Apple's Authorization Server to request consent from resource owner. Query Parameters: state (JSON object) redirect_url Response will contain the same object along with state identifier GET {BASE_URL}/auth/apple/auth-url Example: Request GET {BASE_URL}/auth/apple/auth-url?state={\"redirect_to\":\"login\"}&redirect_url=\"https://example.com/apple/auth/callback\" Response status: 200 OK { \"authorization_url\" : \"https://appleid.apple.com/auth/authorize?client_id=signin.com.dev.example.Example&redirect_uri=https://example.com/auth/apple/token&state={%22identifier%22:%20%22L21RBCKL4XP%22,%20%22fe_redirect_url%22:%20%22https://example.com/apple/auth/callback%22,%20%22redirect_to%22:%20%22login%22}&response_type=code&response_mode=form_post&scope=name%20email\" }","title":"Get Authorization URL"},{"location":"endpoints/#authorize-user","text":"Exchange authorization code for access token and talk to resource server with access token and fetch user's profile information. Note: After successful authorization, the callback will have the authorization code and state. We can fetch code from redirect URI query parameters and pass it to Authorize API. POST {BASE_URL}/auth/apple/authorize Example: Request { \"code\" : \"ce10a4c14aae348b0b3bab1d0a9388f0bA1541ufpZ0R1C1x98Ev1w\" } Response status: 200 OK Response needs to be defined by overriding the AppleAuthResponseHandler class","title":"Authorize User"},{"location":"endpoints/#authorize-ios-token","text":"Verifies an ID Token issued by Apple's authorization server and fetch user details from decoded token. POST {BASE_URL}/auth/apple/authorize/ios Example: Request { \"id_token\" : \"<id_token generated by apple>\" } Response \"Response needs to be defined by overriding the AppleAuthResponseHandler class\"\"","title":"Authorize iOS Token"}]}